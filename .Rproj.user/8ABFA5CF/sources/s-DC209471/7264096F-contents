---
title: 'Project 2: Modeling, Testing, and Predicting'
author: "SDS348"
date: ''
output:
  pdf_document:
    toc: yes
  html_document:
    toc: yes
    toc_float:
      collapsed: no
      smooth_scroll: yes
---

```{r setup, include=FALSE}
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
  # this hook is used only when the linewidth option is not NULL
  if (!is.null(n <- options$linewidth)) {
    x = knitr:::split_lines(x)
    # any lines wider than n should be wrapped
    if (any(nchar(x) > n)) x = strwrap(x, width = n)
    x = paste(x, collapse = '\n')
  }
  hook_output(x, options)
})

knitr::opts_chunk$set(echo = TRUE, eval = TRUE,fig.align="center",warning=FALSE,message=FALSE,fig.width=8, fig.height=5, linewidth=60)
options(tibble.width = 100,width = 100)
library(tidyverse)

class_diag<-function(probs,truth){
  
  if(is.numeric(truth)==FALSE & is.logical(truth)==FALSE) truth<-as.numeric(truth)-1
  
  tab<-table(factor(probs>.5,levels=c("FALSE","TRUE")),truth)
  prediction<-ifelse(probs>.5,1,0)
  acc=mean(truth==prediction)
  sens=mean(prediction[truth==1]==1)
  spec=mean(prediction[truth==0]==0)
  ppv=mean(truth[prediction==1]==1)
  
  #CALCULATE EXACT AUC
  ord<-order(probs, decreasing=TRUE)
  probs <- probs[ord]; truth <- truth[ord]
  
  TPR=cumsum(truth)/max(1,sum(truth)) 
  FPR=cumsum(!truth)/max(1,sum(!truth))
  
  dup<-c(probs[-1]>=probs[-length(probs)], FALSE)
  TPR<-c(0,TPR[!dup],1); FPR<-c(0,FPR[!dup],1)
  
  n <- length(TPR)
  auc<- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )

  data.frame(acc,sens,spec,ppv,auc)
}
```

# Modeling

## Instructions

A knitted R Markdown document (as a PDF) and the raw R Markdown file (as .Rmd) should both be submitted to Canvas by 11:59pm on 5/1/2020. These two documents will be graded jointly, so they must be consistent (i.e., donâ€™t change the R Markdown file without also updating the knitted document). Knit an html copy too, for later! In the .Rmd file for Project 2, you can copy the first code-chunk into your project .Rmd file to get better formatting. Notice that you can adjust the opts_chunk$set(...) above to set certain parameters if necessary to make the knitting cleaner (you can globally set the size of all plots, etc). You can copy the set-up chunk in Project2.Rmd: I have gone ahead and set a few for you (such as disabling warnings and package-loading messges when knitting)! 

Like before, I envision your written text forming something of a narrative structure around your code/output. All results presented must have corresponding code. Any answers/results/plots etc. given without the corresponding R code that generated the result will not be graded. Furthermore, all code contained in your final project document should work properly. Please do not include any extraneous code or code which produces error messages. (Code which produces warnings is acceptable, as long as you understand what the warnings mean).

## Find data:

Find one dataset with at least 5 variables that wish to use to build models. At least one should be categorical (with 2-5 groups) and at least two should be numeric. Ideally, one of your variables will be binary (if not, you will need to create one by discretizing a numeric, which is workable but less than ideal). You will need a minimum of 40 observations (*at least* 10 observations for every explanatory variable you have, ideally 20+ observations/variable).

It is perfectly fine to use either dataset (or the merged dataset, or a subset of your variables) from Project 1. However, you could also diversify your portfolio a bit by choosing a different dataset to work with (particularly if the variables did not reveal interesting associations in Project 1). The only requirement/restriction is that you may not use data from any examples we have done in class or lab. It would be a good idea to pick more cohesive data this time around (i.e., variables that you actually thing might have a relationship you would want to test). Think more along the lines of your Biostats project.

Again, you can use data from anywhere you want (see bottom for resources)! If you want a quick way to see whether a built-in (R) dataset has binary and/or character (i.e., categorical) variables, check out this list: https://vincentarelbundock.github.io/Rdatasets/datasets.html.


## Guidelines and Rubric

- **0. (5 pts)** Introduce your dataset and each of your variables (or just your main variables if you have lots) in a paragraph. What are they measuring? How many observations?

*My dataset, Summer, is derived from the Storms dataset, which included the positions and attributes of 198 tropical storms in the Atlantic Ocean, measured every six hours during the lifetime of a storm. The Summer dataset has omitted all NAs and filtered for only the summer months: June, July and August. It also has an added variable named "Binary," derived from the original status variable, where "1" is a hurricane and "0" is not a hurricane, either tropical depression or tropical storm. The main numeric variables we're using are wind speed (knots), air pressure (millibars), diameter of the area experiencing, and diameter of the area experiencing hurricane strength winds (64 knots or above). The categorical variable used is the month the storm occurs. The Summer dataset has 1203 observations in total.*

- **1. (15 pts)** Perform a MANOVA testing whether any of your numeric variables (or a subset of them, if including them all doesn't make sense) show a mean difference across levels of one of your categorical variables (3). If they do, perform univariate ANOVAs to find response(s) showing a mean difference across groups (3), and perform post-hoc t tests to find which groups differ (3). Discuss the number of tests you have performed, calculate the probability of at least one type I error (if unadjusted), and adjust the significance level accordingly (bonferroni correction) before discussing significant differences (3). Briefly discuss assumptions and whether or not they are likely to have been met (2).

```{R}
library(dplyr)
library(tidyverse)
data <- storms%>%na.omit%>%glimpse()
data1 <- transform(data, lat = as.character(lat),long = as.character(long))
mydata<-data1%>% unite(name, year, day, hour, col = "unique", sep=".")
Table1 <- mydata%>%select(unique, month, lat, long)
Table2 <- mydata%>%select(unique, status, category, wind, pressure, ts_diameter, hu_diameter)
finaldata <- full_join(Table1, Table2, by= "unique")
finaldata <- transform(finaldata, month = as.character(month))
summer <- finaldata%>%filter(month %in% c("6", "7", "8"))
summer <-summer%>%mutate(Binary=ifelse(status=="hurricane",1,0))
summer <-summer%>%mutate(outcome=ifelse(status=="hurricane","hurricane","not hurricane"))
summer$outcome<-factor(summer$outcome)
summer <- summer %>% select(-lat, -long, -category)
head(summer)
```
```{R}
#Perform a MANOVA testing whether any of your numeric variables (or a subset of them, if including them all doesn't make sense) show a mean difference across levels of one of your categorical variables (3)

man1<-manova(cbind(wind,pressure)~month, data=summer)
summary(man1)
```
*I performed MANOVA testing on whether wind or pressure (numeric variables) show a mean difference across the different summer months (categorical variable) of my dataset, resulting in a p-value of 1.434e-15, which is significant.* 
```{R}
#perform univariate ANOVAs to find response(s) showing a mean difference across groups (3)

summary.aov(man1)
```
*I performed univariate ANOVAs to find the response(s) showing a mean difference across groups, which was both wind and pressure, as their p-values was less than 0.05.*
```{R}
#perform post-hoc t tests to find which groups differ

summer%>%group_by(month)%>%summarize(mean(wind),mean(pressure), mean(Binary))
pairwise.t.test(summer$wind, summer$month, p.adj = "none")
pairwise.t.test(summer$pressure, summer$month, p.adj = "none")
pairwise.t.test(summer$Binary, summer$month, p.adj = "none")
```
*Based on the post-hoc t tests, the differences in wind speed in June compared to July and August are significantly different. None of the differences in pressure between different months were significantly different.* 
```{R}
#Discuss the number of tests you have performed, calculate the probability of at least one type I error (if unadjusted), and adjust the significance level accordingly (bonferroni correction) before discussing significant differences (3)

1-0.95^9 #Probability for making type I error (0.3697506)
0.05/9 #Bonferroni Adjustment = 0.005555556
```
*I performed 9 tests, and the probability of at least one type I error if unadjusted is 0.37. The bonferroni correction results in an alpha of 0.005555556, so only the difference in wind speed between June and August is significantly independent.*
```{R}
#Briefly discuss assumptions and whether or not they are likely to have been met (2).

ggplot(summer, aes(x = wind, y = pressure)) +
geom_point(alpha = .5) + geom_density_2d(h=20) + coord_fixed() + facet_wrap(~month)

covmats<-summer%>%group_by(status)%>%do(covs=cov(.[7:8]))
for(i in 1:3){print(as.character(covmats$status[i])); print(covmats$covs[i])}
```
*The assumption of multivariate normality is not met as the graphs aren't quite ovoid. Covariance matrices for each group also differs so the assumption of homogeneity of (co)variances was also not met. MANOVA analysis would not be the proper technique in this situation, but we'll still continue through this project.*

- **2. (10 pts)** Perform some kind of randomization test on your data (that makes sense). This can be anything you want! State null and alternative hypotheses, perform the test, and interpret the results (7). Create a plot visualizing the null distribution and the test statistic (3).

```{R}
summer <- summer%>%mutate(hurricane_status=ifelse(status=="hurricane","hurricane","not hurricane"))

summer%>%group_by(hurricane_status)%>%summarize(means=mean(wind))%>%summarize(diff(means))

rand_dist<-vector() 
  for(i in 1:5000){
    new <- data.frame(wind=sample(summer$wind),storm =summer$hurricane_status)
    rand_dist[i] <- mean(new[new$storm=="not hurricane",]$wind)- mean(new[new$storm=="hurricane",]$wind)}

t.test(data=summer, wind~hurricane_status)
```
*The null hypothesis is that wind speed has no effect on the status of a storm, whether or not it's a hurricane. The alternative hypothesis is that wind speed has an effect on the status of a storm. Based on the results of the randomization test, the p-value was < 2.2e-16, so we can reject the null hypothesis that wind speed has no effect on the status of a storm.*
```{R}  
#Create a plot visualizing the null distribution and the test statistic (3).

{hist(rand_dist,main="",ylab="", xlim = c(-50,8)); abline(v = -48.45678,col="red")}
mean(rand_dist>48.45678 | rand_dist< -48.45678) 
```

- **3. (35 pts)** Build a linear regression model predicting one of your response variables from at least 2 other variables, including their interaction. Mean-center any numeric variables involved in the interaction.
```{R}
#Interpret the coefficient estimates (do not discuss significance) (10)

summer$wind_c <- summer$wind - mean(summer$wind)
summer$pres_c <- summer$pressure - mean(summer$pressure)
summer %>% count(status)
fit <- lm(wind~status*pres_c, data=summer)
summary(fit)
```
*The intercept shows the wind speed when the pressure is at the mean value and the status of the storm is a hurricane. The coefficient estimates of statustropical depression and statustropical storm show the decrease in wind speed when the pressure remains at the mean value, but the status of the storm changes to tropical depression and storm. The pres_c coefficient estimate represents the slope of the reference group, hurricanes. The statustropical depression:pres_c and statustropical storm:pres_c coefficient estimates show the difference in slopes when the status of the storm changes to tropical depression and storm.*
```{R}
#Plot the regression using `ggplot()`. If your interaction is numeric by numeric, refer to code near the end of WS15 to make the plot. If you have 3 or more predictors, just chose two to plot for convenience. (8) and check assumptions of linearity

ggplot(summer, aes(x=pres_c, y= wind))+geom_point(aes(color=factor(status)))+  stat_smooth(method="lm",se=F,fullrange=T)+ theme(legend.position=c(.9,.19))
#This plot shows the linearity between the predictor (centered pressure) and the response variable (wind), and it's fairly linear
```
```{R}
#Check assumptions of normality and homoskedasticity either graphically or using a hypothesis test (4)

#Test for homoskedasticity
resids<-fit$residuals; fitvals<-fit$fitted.values
ggplot()+geom_point(aes(fitvals,resids))+geom_hline(yintercept=0, col="red")
#The homoskedacity is okay because there is no flaring in the graph.

#Normality test
plot(fit,2) 
# There's some flaring at the ends, so normality may have not been met.
```
```{R}
library(lmtest)
library(sandwich)
coeftest(fit, vcov=vcovHC(fit))
summary(fit)
```
*The coefficient estimates didn't change after robust SEs. The standard errors changed by less than 0.3, which isn't significant. The adjusted R^2 shows that 0.9306 of the variation in the outcome is explained by my model.*

    - Interpret the coefficient estimates (do not discuss significance) (10)
    - Plot the regression using `ggplot()`. If your interaction is numeric by numeric, refer to code near the end of WS15 to make the plot. If you have 3 or more predictors, just chose two to plot for convenience. (8)
    - Check assumptions of linearity, normality, and homoskedasticity either graphically or using a hypothesis test (4)
    - Regardless, recompute regression results with robust standard errors via `coeftest(..., vcov=vcovHC(...))`. Discuss significance of results, including any changes from before/after robust SEs if applicable. (8)
    - What proportion of the variation in the outcome does your model explain? (4)
    

- **4. (5 pts)** Rerun same regression model (with interaction), but this time compute bootstrapped standard errors. Discuss any changes you observe in SEs and p-values using these SEs compared to the original SEs and the robust SEs)

```{R}
fit <- lm(wind~status*pres_c, data=summer)

samp_distn<-replicate(5000, {
  boot_dat<-summer[sample(nrow(summer),replace=TRUE),]
  fit<-lm(wind~status*pres_c, data=boot_dat) 
  coef(fit)
})

summary(fit)
coeftest(fit, vcov=vcovHC(fit))
samp_distn%>%t%>%as.data.frame%>%summarize_all(sd)
```
*The bootstrapped standard errors are closer to the robust SEs than the original SEs, but the differences are very minor. Therefore, the p-values didn't change very much, but the p-value of statustropical storm:pres_c was higher in the robust SEs than the original, so it's probably also higher in the bootstrapped standard errors. When standard error increases, the p-value also increases, as the finding are less significant when there's a larger margin for error.*

- **5. (40 pts)** Perform a logistic regression predicting a binary categorical variable (if you don't have one, make/get one) from at least two explanatory variables (interaction not necessary). 

```{R}
#Interpret coefficient estimates in context (10)
fit<-glm(Binary~ ts_diameter+hu_diameter,data=summer,family="binomial")
coeftest(fit)
exp(coeftest(fit))
```
*The odds of a storm being a hurricane is 0.0038755 when the diameter of the area experiencing tropical storm strength winds (34 knots or above) and the diameter of the area experiencing hurricane strength winds (64 knots or above) are both zero. While negative odds don't usually make sense, the coefficient estimate means that a storm will definitely not be a hurricane when ts_diameter and hu_diameter, which is understandable. When controlling for hu_diameter, the odds of a storm being a hurricane increases by 0.9994383*
```{R}
#Report a confusion matrix for your logistic regression (2)
probs<-predict(fit,type="response")
table(predict=as.numeric(probs>.5),truth=summer$Binary)%>%addmargins
```
```{R}
#Compute and discuss the Accuracy, Sensitivity (TPR), Specificity (TNR), and Recall (PPV) of your model (5)

#Accuracy
(943+256)/1203
#ratio of the correctly labeled storms to total amount of storms - the number of True Positives for classifying storms as hurricanes out of all the data. Very high accuracy.

#Sensitivity (TPR)
256/259
#proportion of true positives that were correctly identified as that --> out of all 259 actual hurricanes, 256 of those storms were identified as hurricanes. The TPR was quite high, indicating this prediction is pretty accurate.

#Specificity (TNR)
943/944  
#proportion of true negatives that are correctly identified as that --> Out of 944 actual storms that weren't hurricanes, 943 of those storms were properly identified as not hurricanes. The TNR was also quite high, indicating that our model was pretty accurate for this prediction

#Recall (PPV)
256/257
#the number of relevant reports identified divided by the total number of reports identified --> out of all 257 storms identified as hurricanes, 256 were actually hurricanes. The PPV was pretty high, good prediction model
```
```{R}
#Using ggplot, plot density of log-odds (logit) by your binary outcome variable (3)
summer$logit<-predict(fit,type="link")
summer%>%ggplot()+geom_density(aes(logit,color=outcome,fill=outcome), alpha=.4)+xlim(-12,8)+ylim(0,0.2)+theme(legend.position=c(.85,.85))+geom_vline(xintercept=-10)+xlab("logit (log-odds)")+geom_rug(aes(logit,color=outcome))+ geom_text(x=-5,y=.07,label="TN = 943")+
  geom_text(x=-1.75,y=.008,label="FN = 3")+
  geom_text(x=1,y=.006,label="FP = 1")+
  geom_text(x=5,y=.04,label="TP = 256")
```
```{R}
#Generate an ROC curve (plot) and calculate AUC (either manually or with a package); interpret (10)
library(plotROC)
library(pROC)
ROCplot<-ggplot(summer)+geom_roc(aes(d=Binary,m=probs), n.cuts=0) 
ROCplot
calc_auc(ROCplot)
class_diag(probs,summer$Binary)
auc(summer$outcome,probs)
```
*With an AUC of 0.9994, these variables are great predictors for the response variable, whether the storm is a hurricane or not. This is a very accurate prediction model.* 
```{R}
#Perform 10-fold (or repeated random sub-sampling) CV and report average out-of-sample Accuracy, Sensitivity, and Recall(10)
k=10 
data<-summer[sample(nrow(summer)),] #randomly order rows
folds<-cut(seq(1:nrow(data)),breaks=k,labels=F) # create folds

diags<-NULL
for(i in 1:k){
  train<-data[folds!=i,] 
  test<-data[folds==i,]
  truth<-test$Binary
  fit<-glm(Binary~ ts_diameter+hu_diameter,data=train,family="binomial")
  probs<-predict(fit,newdata = test,type="response")
  diags<-rbind(diags,class_diag(probs,truth))
}
summarize_all(diags,mean)
```
*The average out-of-sample Accuracy, Sensitivity, and Recall are 0.9966804, 0.9869091, and 0.9964286.*	

    - Interpret coefficient estimates in context (10)
    - Report a confusion matrix for your logistic regression (2)
    - Compute and discuss the Accuracy, Sensitivity (TPR), Specificity (TNR), and Recall (PPV) of your model (5)
    - Using ggplot, plot density of log-odds (logit) by your binary outcome variable (3)
    - Generate an ROC curve (plot) and calculate AUC (either manually or with a package); interpret (10)
    - Perform 10-fold (or repeated random sub-sampling) CV and report average out-of-sample Accuracy, Sensitivity, and Recall (10)

- **6. (10 pts)** Choose one variable you want to predict (can be one you used from before; either binary or continuous) and run a LASSO regression inputting all the rest of your variables as predictors. Choose lambda to give the simplest model whose accuracy is near that of the best (i.e., `lambda.1se`). Discuss which variables are retained. Perform 10-fold CV using this model: if response in binary, compare model's out-of-sample accuracy to that of your logistic regression in part 5; if response is numeric, compare the residual standard error (at the bottom of the summary output, aka RMSE): lower is better fit!
```{R}
library(glmnet)
lasso <- summer %>% select(-unique, -outcome, -hurricane_status, -wind_c, -pres_c, -logit, -status)
lasso <- lasso %>% mutate(month=factor(month))
y <- as.matrix(lasso$Binary)
x<-model.matrix(Binary~-1+.,data=lasso)

cv<-cv.glmnet(x,y,family="binomial")
regression<-glmnet(x,y,family="binomial",lambda=cv$lambda.1se)
coef(regression)
```
*The variables wind and hu_diameter were retained after the lasso test.*
```{R}
k=10
data<-lasso[sample(nrow(lasso)),]
folds<-cut(seq(1:nrow(lasso)),breaks=k,labels=F)

diags<-NULL
for(i in 1:k){
  train <- data[folds!=i,] #create training set (all but fold i)
  test <- data[folds==i,] #create test set (just fold i)
  truth <- test$Binary #save truth labels from fold i
  
  fit <- glm(Binary~wind+hu_diameter, 
             data=train, family="binomial")
  probs <- predict(fit, newdata=test, type="response")
  
  diags<-rbind(diags,class_diag(probs,truth))
}

diags%>%summarize_all(mean)
```
*The out-of-sample accuracy is now 0.9991667, compared to 0.9966804 from the logistic regression in part 5. While this is ever so slightly more accurate, this dataset had some great predictors of the response variable. This increase in out-of-sample accuracy is very small, nearly negligable.*

## Where do I find data again?

You can choose ANY datasets you want that meet the above criteria for variables and observations. You can make it as serious as you want, or not, but keep in mind that you will be incorporating this project into a portfolio webpage for your final in this course, so choose something that really reflects who you are, or something that you feel will advance you in the direction you hope to move career-wise, or something that you think is really neat, or whatever. On the flip side, regardless of what you pick, you will be performing all the same tasks, so it doesn't end up being that big of a deal.

If you are totally clueless and have no direction at all, log into the server and type 

```{R eval=F}
data(package = .packages(all.available = TRUE))
```

This will print out a list of **ALL datasets in ALL packages** installed on the server (a ton)! Scroll until your eyes bleed! Actually, do not scroll that much... To start with something more manageable, just run the command on your own computer, or just run `data()` to bring up the datasets in your current environment. To read more about a dataset, do `?packagename::datasetname`. 

If it is easier for you, and in case you don't have many packages installed, a list of R datasets from a few common packages (also downloadable in CSV format) is given at the following website: https://vincentarelbundock.github.io/Rdatasets/datasets.html.

- A good package to download for fun/relevant data is `fivethiryeight`. 
Run `install.packages("fivethirtyeight"),` load the packages with `library(fivethirtyeight)`, run `data()`, and then scroll down to view the datasets. Here is an online list of all 127 datasets (with links to the 538 articles). Lots of sports, politics, current events, etc.

- If you have already started to specialize (e.g., ecology, epidemiology) you might look at discipline-specific R packages (vegan, epi, respectively). We will be using some tools from these packages later in the course, but they come with lots of data too, which you can explore according to the directions above

- However, you *emphatically DO NOT* have to use datasets available via R packages! In fact, I would much prefer it if you found the data from completely separate sources and brought them together (a much more realistic experience in the real world)! You can even reuse data from your SDS328M project, provided it shares a variable in common with other data which allows you to  merge the two together (e.g., if you still had the timestamp, you could look up the weather that day: https://www.wunderground.com/history/). If you work in a research lab or have access to old data, you could potentially merge it with new data from your lab!

- Here is a curated list of interesting datasets (read-only spreadsheet format): https://docs.google.com/spreadsheets/d/1wZhPLMCHKJvwOkP4juclhjFgqIY8fQFMemwKL2c64vk/edit

- Here is another great compilation of datasets: https://github.com/rfordatascience/tidytuesday

- Here is the UCI Machine Learning Repository: https://archive.ics.uci.edu/ml/index.php

    - See also https://en.wikipedia.org/wiki/List_of_datasets_for_machine-learning_research#Biological_data

- Here is another good general place to look: https://www.kaggle.com/datasets

- To help narrow your search down or to see interesting variable ideas, check out https://www.tylervigen.com/spurious-correlations. This is the spurious correlations website, and it is fun, but if you look at the bottom of each plot you will see sources for the data. This is a good place to find very general data (or at least get a sense of where you can scrape data together from)!

- If you are interested in medical data, check out www.countyhealthrankings.org

- If you are interested in scraping UT data, they make *loads* of data public (e.g., beyond just professor CVs and syllabi). Check out all the data that is available in the statistical handbooks: https://reports.utexas.edu/statistical-handbook

##### Broader data sources:

[Data.gov](www.data.gov) 186,000+ datasets!

[Social Explorer](Social Explorer) is a nice interface to Census and American Community Survey data (more user-friendly than the government sites). May need to sign up for a free trial.

[U.S. Bureau of Labor Statistics](www.bls.gov)

[U.S. Census Bureau](www.census.gov)

[Gapminder](www.gapminder.org/data), data about the world.

...





